{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CODERTOOLS","text":""},{"location":"#_1","title":"\u672c\u5de5\u5177\u7684\u4e3b\u8981\u76ee\u6807\u662f\u8ba9\u5927\u6a21\u578b\u53ef\u4ee5\u4e1d\u6ed1\u7684\u4f7f\u7528\u548c\u7406\u89e3\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u5305","text":"<p>\u6211\u4eec\u5927\u81f4\u7684\u601d\u8def\u662f: \u5927\u6a21\u578b\u53ef\u4ee5\u8fbe\u5230\u7406\u89e3\u5e76\u4f7f\u7528\u7b2c\u4e09\u65b9\u5305\u7684\u7a0b\u5ea6 \u800c\u6211\u4eec\u5f00\u53d1\u7684\u79c1\u6709\u5305\u5219\u901a\u8fc7\u6807\u51c6\u5316\u548c\u89c4\u8303\u5316,\u8fdb\u800c\u4f7f\u5927\u6a21\u578b\u7406\u89e3</p> <p>\u5728\u5927\u6a21\u578b\u53ef\u4ee5\u5b8c\u7f8e\u4f7f\u7528\u4e00\u4e2a\u4e09\u65b9\u5305\u65f6, \u53ef\u4ee5\u5f00\u59cb\u62d3\u5c55\u5230\u591a\u4e2a\u5305\u7684\u914d\u5408\u4f7f\u7528 \u6846\u67b6\u7ea7\u522b\u7684\u5305\u7684\u4f7f\u7528\u7b49.\u4e3a\u6700\u7ec8\u7684\u8c03\u5ea6\u8d4b\u80fd.</p>"},{"location":"client/","title":"client","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u9488\u5bf9\u7b2c\u4e09\u65b9\u5305\u505a\u57fa\u51c6\u7b14\u8bb0\u7684\u5de5\u5177</p>"},{"location":"client/#codertools.packager.function.process_github_issues","title":"<code>process_github_issues(base_path='./test2_md', github_path='tqdm/tqdm')</code>","text":"<p>\u4eceGitHub\u8bfb\u53d6\u95ee\u9898\uff0c\u751f\u6210\u76f8\u5e94\u7684Markdown\u6587\u4ef6\u3002   </p> <p>base_path : \u57fa\u7840\u8def\u5f84  github_path : \u76ee\u6807\u4ed3\u5e93 tqdm/tqdm</p> Source code in <code>codertools/packager/function.py</code> <pre><code>def process_github_issues(base_path:str = \"./test2_md\",github_path:str = \"tqdm/tqdm\")-&gt;None:\n    \"\"\"\n    \u4eceGitHub\u8bfb\u53d6\u95ee\u9898\uff0c\u751f\u6210\u76f8\u5e94\u7684Markdown\u6587\u4ef6\u3002   \n\n    base_path : \u57fa\u7840\u8def\u5f84   \n    github_path : \u76ee\u6807\u4ed3\u5e93 tqdm/tqdm   \n    \"\"\"\n\n    owner,repo = github_path.split('/')\n    issue_documents = read_github_issue(owner=owner, repo=repo)\n\n    issues = {}\n    for issue_document in issue_documents:\n        question = issue_document.text\n        http_url = os.path.join(issue_document.metadata.get('url'), 'comments')\n        # answer_markdown = get_comments(http_url)\n        # answer_markdown = answer_markdown or ''\n        answer_markdown = ''\n        topic = question[:20].replace('/','_').replace('\\n','_')\n        values = template.format(topic = topic,\n                        describe =question,\n                        date = datetime.today().strftime(\"%Y-%m-%d\"),\n                        link = http_url)\n        issues.update({topic:values + '\\n\\n' + answer_markdown})\n\n    for topic,content in issues.items():\n        save_to_file(content,base_path,f\"{topic}.md\")\n</code></pre>"},{"location":"client/#codertools.packager.function.process_github_repo","title":"<code>process_github_repo(base_path='./test_md', github_path='tqdm/tqdm', overwrite_files=True)</code>","text":"<p>\u4eceGitHub\u5b58\u50a8\u5e93\u8bfb\u53d6\u6587\u6863\uff0c\u89e3\u6790\u5176Markdown\u5185\u5bb9\u5e76\u521b\u5efa\u6587\u4ef6\u7ed3\u6784.   </p> <p>base_path : \u57fa\u7840\u8def\u5f84   </p> <p>github_path : \u76ee\u6807\u4ed3\u5e93 tqdm/tqdm</p> Source code in <code>codertools/packager/function.py</code> <pre><code>def process_github_repo(base_path:str=\"./test_md\",github_path:str = \"tqdm/tqdm\",overwrite_files:bool=True)-&gt;None:\n    \"\"\"\n    \u4eceGitHub\u5b58\u50a8\u5e93\u8bfb\u53d6\u6587\u6863\uff0c\u89e3\u6790\u5176Markdown\u5185\u5bb9\u5e76\u521b\u5efa\u6587\u4ef6\u7ed3\u6784.   \n\n    base_path : \u57fa\u7840\u8def\u5f84   \n\n    github_path : \u76ee\u6807\u4ed3\u5e93 tqdm/tqdm   \n    \"\"\"\n    owner,repo = github_path.split('/')\n    docs_documents = read_github_repo(owner=owner, repo=repo)\n\n    file_dict = {}\n    for docs_document in docs_documents:\n        file_name = docs_document.metadata.get(\"file_name\")[:-3]\n        text = docs_document.text\n        structure = parse_markdown_to_custom_structure(markdown_content=text,\n                                                       folder_name=file_name)\n        file_dict.update(structure)\n\n    # overwrite_files = True\n    create_file_structure(file_dict, base_path=base_path, overwrite=overwrite_files)\n</code></pre>"},{"location":"client/#reader","title":"reader","text":""},{"location":"client/#codertools.packager.reader.read_github_issue","title":"<code>read_github_issue(owner='pydantic', repo='pydantic', state=None, labelFilter=None)</code>","text":"<p>\u8bfb\u53d6github\u4ed3\u5e93\u4e2d\u7684 issue \u95ee\u9898\u96c6  owner: str \u4f5c\u8005 repo: str \u4ed3\u5e93\u540d state : \u4ed3\u5e93\u72b6\u6001 state or GitHubRepositoryIssuesReader.IssueState.CLOSED,# GitHubRepositoryIssuesReader.IssueState.OPEN or .CLOSED or .ALL labelFilters: \u6309\u7167\u6807\u7b7e\u7b5b\u9009\u5185\u5bb9 \u6682\u672a\u5f00\u653e</p> Source code in <code>codertools/packager/reader.py</code> <pre><code>def read_github_issue(owner:str=\"pydantic\",\n                      repo:str=\"pydantic\",\n                      state:GitHubRepositoryIssuesReader.IssueState=None,\n                      labelFilter:list = None)-&gt;'documents':\n    \"\"\"\n    \u8bfb\u53d6github\u4ed3\u5e93\u4e2d\u7684 issue \u95ee\u9898\u96c6   \n    owner: str \u4f5c\u8005\n    repo: str \u4ed3\u5e93\u540d\n    state : \u4ed3\u5e93\u72b6\u6001 state or GitHubRepositoryIssuesReader.IssueState.CLOSED,# GitHubRepositoryIssuesReader.IssueState.OPEN or .CLOSED or .ALL\n    labelFilters: \u6309\u7167\u6807\u7b7e\u7b5b\u9009\u5185\u5bb9 \u6682\u672a\u5f00\u653e\n    \"\"\"\n    github_client = GitHubIssuesClient(github_token=os.environ[\"GITHUB_TOKEN\"], verbose=True)\n\n    reader = GitHubRepositoryIssuesReader(\n        github_client=github_client,\n        owner=owner,\n        repo=repo,\n        verbose=True,\n    )\n\n\n    documents = reader.load_data(\n        state=state or GitHubRepositoryIssuesReader.IssueState.CLOSED,# GitHubRepositoryIssuesReader.IssueState.OPEN or .CLOSED or .ALL\n        #labelFilters= labelFilters or [(\"bug V2\", GitHubRepositoryIssuesReader.FilterType.INCLUDE)], # \u6839\u636e\u6807\u7b7e\u8fc7\u6ee4\n    )\n    return documents\n</code></pre>"},{"location":"client/#codertools.packager.reader.read_github_repo","title":"<code>read_github_repo(owner='pydantic', repo='pydantic', branch='main', filter_directories=None, filter_file_extensions=None)</code>","text":"<p>\u8bfb\u53d6github\u4ed3\u5e93\u4e2d\u7684\u6587\u6863\u6216\u8005\u5176\u4ed6\u6587\u4ef6\u5185\u5bb9  owner: str \u4f5c\u8005  repo: str \u4ed3\u5e93\u540d  branch : \u5206\u652f  filter_directories: \u6309\u7167\u6587\u4ef6\u5939\u7b5b\u9009(\u5305\u542b)  [\"docs/concepts\"]  filter_file_extensions: \u6309\u7167\u6587\u4ef6\u7c7b\u578b\u7b5b\u9009 (\u6392\u9664)</p> Source code in <code>codertools/packager/reader.py</code> <pre><code>def read_github_repo(owner:str=\"pydantic\",\n                     repo:str=\"pydantic\",\n                     branch:str=\"main\",\n                     filter_directories:list=None,\n                     filter_file_extensions:list = None\n                     ):\n    \"\"\"\n    \u8bfb\u53d6github\u4ed3\u5e93\u4e2d\u7684\u6587\u6863\u6216\u8005\u5176\u4ed6\u6587\u4ef6\u5185\u5bb9   \n    owner: str \u4f5c\u8005   \n    repo: str \u4ed3\u5e93\u540d   \n    branch : \u5206\u652f   \n    filter_directories: \u6309\u7167\u6587\u4ef6\u5939\u7b5b\u9009(\u5305\u542b)  [\"docs/concepts\"]   \n    filter_file_extensions: \u6309\u7167\u6587\u4ef6\u7c7b\u578b\u7b5b\u9009 (\u6392\u9664)   \n\n    \"\"\"\n    github_client = GithubClient(github_token=os.environ[\"GITHUB_TOKEN\"], verbose=False)\n\n    reader = GithubRepositoryReader(\n        github_client=github_client,\n        owner=owner,\n        repo=repo,\n        use_parser=False,\n        verbose=False,\n        filter_directories=(\n            filter_directories or [\"docs/concepts\"],\n            GithubRepositoryReader.FilterType.INCLUDE,\n        ),\n        filter_file_extensions=(\n            filter_file_extensions or [\n                \".png\",\n                \".jpg\",\n                \".jpeg\",\n                \".gif\",\n                \".svg\",\n                \".ico\",\n                \"json\",\n                \".ipynb\",\n            ],\n            GithubRepositoryReader.FilterType.EXCLUDE,\n        ),\n    )\n\n    documents = reader.load_data(branch=branch)\n    return documents\n</code></pre>"}]}